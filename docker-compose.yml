version: '3.8'

services:
  # ========================================
  # 主應用程式服務
  # ========================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ga-plus-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/ga_plus_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - weaviate
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # PostgreSQL 資料庫
  # ========================================
  db:
    image: postgres:15-alpine
    container_name: ga-plus-db
    environment:
      POSTGRES_DB: ga_plus_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # Redis 快取服務
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: ga-plus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ga-plus-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ========================================
  # Weaviate 向量資料庫
  # ========================================
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: ga-plus-weaviate
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: ''
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # Nginx 反向代理
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: ga-plus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # Celery 背景任務處理器
  # ========================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ga-plus-celery-worker
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/ga_plus_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # Celery Beat 排程器
  # ========================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ga-plus-celery-beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/ga_plus_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # Flower - Celery 監控工具
  # ========================================
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ga-plus-flower
    command: celery -A app.core.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/ga_plus_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # Prometheus 監控
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: ga-plus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # Grafana 儀表板
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: ga-plus-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ga-plus-network
    restart: unless-stopped

  # ========================================
  # 前端應用程式 (開發環境)
  # ========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ga-plus-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    networks:
      - ga-plus-network
    restart: unless-stopped

# ========================================
# 網路配置
# ========================================
networks:
  ga-plus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================
# 持久化儲存卷
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 